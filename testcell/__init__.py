__version__ = "0.0.6"
# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_testcell.ipynb.

# %% auto 0
__all__ = ['testcell', 'testcelln']

# %% ../nbs/02_testcell.ipynb 4
import ast
from IPython.core.magic import register_cell_magic, needs_local_scope
from IPython import get_ipython # needed for quarto

# %% ../nbs/02_testcell.ipynb 5
from .core import auto_return

# %% ../nbs/02_testcell.ipynb 6
@register_cell_magic
@needs_local_scope
def testcell(line, cell, local_ns):
    # Parse arguments
    verbose = 'verbose' in line # enable verbose 
    dryrun = 'dryrun' in line # this will avoid running the code and just print out the code like verbose
    noglobals = 'noglobals' in line # no access to global variables, this enables 'noreturn' too 
    noreturn = 'noreturn' in line # display but does not return anything, so no memory "footprint" after execution
    
    # arguments rules
    if noglobals or dryrun: noreturn=True
    if dryrun: verbose=True
    
    # Do the job
    cell = auto_return(cell)
    lines = cell.splitlines()

    # Wrap inside a function and execute it
    arr = ['def _test_cell_():']
    arr += ['\t'+x for x in lines]
    arr += ['try:\n\t_ = _test_cell_()'] # execute it and assign result to '_'
    arr += ['finally:\n\tdel _test_cell_'] # delete it
    if noreturn:
        arr += ['if _ is not None: display(_)'] # having this as last line makes the same behavior as normal cell        
    else:
        arr += ['_ # This will be added to global scope'] # having this as last line makes the same behavior as normal cell
    wrapped_cell = '\n'.join(arr)

    if verbose: print('\n### BEGIN\n'+wrapped_cell+'\n### END')

    _globals = {} if noglobals else local_ns
    _locals = {'_':None} if noreturn else None # we mask '_' with a local variable to prevent it affecting global scope
    if not 'dryrun' in line: exec(wrapped_cell,_globals,_locals)

    
    return None if noreturn else _globals.get('_',None) # this closes the loop of integration

# %% ../nbs/02_testcell.ipynb 10
@register_cell_magic
@needs_local_scope
def testcelln(line, cell, local_ns):
    return testcell(line=line+ ' noglobals', cell=cell, local_ns=local_ns)
